@using WebUI.Model
@page "/"
@inject WebUI.AppState state
@inject WebUI.Services.AuthorizedService authorizedService
@inject WebUI.Services.ItemService itemService

<div class="section">
  <div class="container">
    <p class="title"><strong class="has-text-info">Welcome</strong> to coolstore microservices</p>
    <p class="subtitle">Below you will find your latests products</p>
  </div>
</div>

<div class="section is-clearfix">
  <AppSidebar/>
  <div class="content is-pulled-right">
    @if (Result.Items.Any())
    {
      <ItemList Items="Result.Items">
        <ItemTemplate Context="item">
          <div class="card is-radius">
            <div class="card-image">
              <NavLink exact href="@($"/detail-item/{item.Id}")">
                <picture class="image">
                  <source data-srcset="@item.ImageUrl">
                  <img class="lazyloaded" src="@item.ImageUrl" alt="Image of @item.Name">
                </picture>
              </NavLink>
            </div>
            <div class="card-content">
              <div class="media">
                <div class="media-content">
                  <NavLink exact href="@($"/detail-item/{item.Id}")">
                    <p class="title is-5">@item.Name</p>
                    <p class="item-price">@($"${item.Price}")</p>
                  </NavLink>
                </div>
                <div class="media-right">
                  <p class="field">
                    <button class="button icon is-large add" aria-label="Add to cart">
                      <span class="fa-stack">
                        <i class="fa fa-circle fa-stack-2x"></i>
                        <i class="fa fa-cart-plus fa-stack-1x fa-inverse"></i>
                      </span>
                    </button>
                  </p>
                </div>
              </div>
              <div style="text-align: left;">
                <Rating/>
              </div>
            </div>
          </div>
        </ItemTemplate>
      </ItemList>
    }
  </div>

  @if (Result.Items.Any())
  {
    <div class="content-pagination is-pulled-right">
      <nav class="pagination" role="navigation" aria-label="pagination">
        <a class="pagination-previous" title="This is the first page" disabled>
          <i class="fas fa-angle-left"></i>
        </a>
        <a class="pagination-next">
          <i class="fas fa-angle-right"></i>
        </a>
        <ul class="pagination-list">
          @for (var i = 1; i < Result.TotalItems / Result.PageSize; i++)
          {
            if (i == Result.CurrentPage)
            {
              <li>
                <a onclick=@(() => Paging(i)) class="pagination-link is-current" aria-label="Page @i" aria-current="page">@i</a>
              </li>
            }
            else
            {
              <li>
                <a onclick=@(() => Paging(i)) class="pagination-link" aria-label="Goto page @i">@i</a>
              </li>
            }
          }
        </ul>
      </nav>
    </div>
  }
</div>

@functions {

    Pagination<ItemModel> Result = new Pagination<ItemModel>();

    protected override async Task OnInitAsync()
    {
      await state.InitAppStore(async () => await authorizedService.EnsureAuthz(state.User));
      Result = await itemService.GetItems(Result.CurrentPage, Result.PageSize);
    }

  protected async Task Paging(int currentPage)
  {
    Result = await itemService.GetItems(currentPage, Result.PageSize);
    StateHasChanged();
  }

}
