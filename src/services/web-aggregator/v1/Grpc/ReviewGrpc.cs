// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: review.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace review {
  public static partial class PingService
  {
    static readonly string __ServiceName = "review.PingService";

    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Protobuf.WellKnownTypes.Empty.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::review.PingResponse> __Marshaller_review_PingResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::review.PingResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::review.PingResponse> __Method_Ping = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::review.PingResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Ping",
        __Marshaller_google_protobuf_Empty,
        __Marshaller_review_PingResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::review.ReviewReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of PingService</summary>
    public abstract partial class PingServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::review.PingResponse> Ping(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for PingService</summary>
    public partial class PingServiceClient : grpc::ClientBase<PingServiceClient>
    {
      /// <summary>Creates a new client for PingService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public PingServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for PingService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public PingServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected PingServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected PingServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::review.PingResponse Ping(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Ping(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::review.PingResponse Ping(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Ping, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::review.PingResponse> PingAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::review.PingResponse> PingAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Ping, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override PingServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new PingServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(PingServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Ping, serviceImpl.Ping).Build();
    }

    /// <summary>Register service method implementations with a service binder. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, PingServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Ping, serviceImpl.Ping);
    }

  }
  public static partial class ReviewService
  {
    static readonly string __ServiceName = "review.ReviewService";

    static readonly grpc::Marshaller<global::review.GetReviewsRequest> __Marshaller_review_GetReviewsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::review.GetReviewsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::review.GetReviewsResponse> __Marshaller_review_GetReviewsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::review.GetReviewsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::review.CreateReviewRequest> __Marshaller_review_CreateReviewRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::review.CreateReviewRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::review.CreateReviewResponse> __Marshaller_review_CreateReviewResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::review.CreateReviewResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::review.DeleteReviewRequest> __Marshaller_review_DeleteReviewRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::review.DeleteReviewRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::review.DeleteReviewResponse> __Marshaller_review_DeleteReviewResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::review.DeleteReviewResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::review.EditReviewRequest> __Marshaller_review_EditReviewRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::review.EditReviewRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::review.EditReviewResponse> __Marshaller_review_EditReviewResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::review.EditReviewResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::review.GetReviewsRequest, global::review.GetReviewsResponse> __Method_GetReviews = new grpc::Method<global::review.GetReviewsRequest, global::review.GetReviewsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetReviews",
        __Marshaller_review_GetReviewsRequest,
        __Marshaller_review_GetReviewsResponse);

    static readonly grpc::Method<global::review.CreateReviewRequest, global::review.CreateReviewResponse> __Method_CreateReview = new grpc::Method<global::review.CreateReviewRequest, global::review.CreateReviewResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateReview",
        __Marshaller_review_CreateReviewRequest,
        __Marshaller_review_CreateReviewResponse);

    static readonly grpc::Method<global::review.DeleteReviewRequest, global::review.DeleteReviewResponse> __Method_DeleteReview = new grpc::Method<global::review.DeleteReviewRequest, global::review.DeleteReviewResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteReview",
        __Marshaller_review_DeleteReviewRequest,
        __Marshaller_review_DeleteReviewResponse);

    static readonly grpc::Method<global::review.EditReviewRequest, global::review.EditReviewResponse> __Method_EditReview = new grpc::Method<global::review.EditReviewRequest, global::review.EditReviewResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "EditReview",
        __Marshaller_review_EditReviewRequest,
        __Marshaller_review_EditReviewResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::review.ReviewReflection.Descriptor.Services[1]; }
    }

    /// <summary>Base class for server-side implementations of ReviewService</summary>
    public abstract partial class ReviewServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::review.GetReviewsResponse> GetReviews(global::review.GetReviewsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::review.CreateReviewResponse> CreateReview(global::review.CreateReviewRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::review.DeleteReviewResponse> DeleteReview(global::review.DeleteReviewRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::review.EditReviewResponse> EditReview(global::review.EditReviewRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ReviewService</summary>
    public partial class ReviewServiceClient : grpc::ClientBase<ReviewServiceClient>
    {
      /// <summary>Creates a new client for ReviewService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ReviewServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ReviewService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ReviewServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ReviewServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ReviewServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::review.GetReviewsResponse GetReviews(global::review.GetReviewsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetReviews(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::review.GetReviewsResponse GetReviews(global::review.GetReviewsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetReviews, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::review.GetReviewsResponse> GetReviewsAsync(global::review.GetReviewsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetReviewsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::review.GetReviewsResponse> GetReviewsAsync(global::review.GetReviewsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetReviews, null, options, request);
      }
      public virtual global::review.CreateReviewResponse CreateReview(global::review.CreateReviewRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateReview(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::review.CreateReviewResponse CreateReview(global::review.CreateReviewRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateReview, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::review.CreateReviewResponse> CreateReviewAsync(global::review.CreateReviewRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateReviewAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::review.CreateReviewResponse> CreateReviewAsync(global::review.CreateReviewRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateReview, null, options, request);
      }
      public virtual global::review.DeleteReviewResponse DeleteReview(global::review.DeleteReviewRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteReview(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::review.DeleteReviewResponse DeleteReview(global::review.DeleteReviewRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteReview, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::review.DeleteReviewResponse> DeleteReviewAsync(global::review.DeleteReviewRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteReviewAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::review.DeleteReviewResponse> DeleteReviewAsync(global::review.DeleteReviewRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteReview, null, options, request);
      }
      public virtual global::review.EditReviewResponse EditReview(global::review.EditReviewRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EditReview(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::review.EditReviewResponse EditReview(global::review.EditReviewRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_EditReview, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::review.EditReviewResponse> EditReviewAsync(global::review.EditReviewRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EditReviewAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::review.EditReviewResponse> EditReviewAsync(global::review.EditReviewRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_EditReview, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ReviewServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ReviewServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ReviewServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetReviews, serviceImpl.GetReviews)
          .AddMethod(__Method_CreateReview, serviceImpl.CreateReview)
          .AddMethod(__Method_DeleteReview, serviceImpl.DeleteReview)
          .AddMethod(__Method_EditReview, serviceImpl.EditReview).Build();
    }

    /// <summary>Register service method implementations with a service binder. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, ReviewServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetReviews, serviceImpl.GetReviews);
      serviceBinder.AddMethod(__Method_CreateReview, serviceImpl.CreateReview);
      serviceBinder.AddMethod(__Method_DeleteReview, serviceImpl.DeleteReview);
      serviceBinder.AddMethod(__Method_EditReview, serviceImpl.EditReview);
    }

  }
}
#endregion
